/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenerateOTPRequest,
  GenerateOTPResponse,
  LoginEmailSubmitRequest,
  LoginOTPSubmitRequest,
  LoginTokenResponse,
} from '../models/index';

export interface EmailLoginRequest {
    loginEmailSubmitRequest?: LoginEmailSubmitRequest;
}

export interface GenerateOTPOperationRequest {
    generateOTPRequest?: GenerateOTPRequest;
}

export interface SubmitOTPRequest {
    loginOTPSubmitRequest?: LoginOTPSubmitRequest;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * Login using email and password
     * @summary Email Login
     * @param {LoginEmailSubmitRequest} [loginEmailSubmitRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    emailLoginRaw(requestParameters: EmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginTokenResponse>>;

    /**
     * Login using email and password
     * Email Login
     */
    emailLogin(loginEmailSubmitRequest?: LoginEmailSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginTokenResponse>;

    /**
     * Generate OTP for the user
     * @summary Generate OTP
     * @param {GenerateOTPRequest} [generateOTPRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    generateOTPRaw(requestParameters: GenerateOTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateOTPResponse>>;

    /**
     * Generate OTP for the user
     * Generate OTP
     */
    generateOTP(generateOTPRequest?: GenerateOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateOTPResponse>;

    /**
     * Submit OTP for the user
     * @summary Submit OTP
     * @param {LoginOTPSubmitRequest} [loginOTPSubmitRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    submitOTPRaw(requestParameters: SubmitOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginTokenResponse>>;

    /**
     * Submit OTP for the user
     * Submit OTP
     */
    submitOTP(loginOTPSubmitRequest?: LoginOTPSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginTokenResponse>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Login using email and password
     * Email Login
     */
    async emailLoginRaw(requestParameters: EmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/emailLogin`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['loginEmailSubmitRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Login using email and password
     * Email Login
     */
    async emailLogin(loginEmailSubmitRequest?: LoginEmailSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginTokenResponse> {
        const response = await this.emailLoginRaw({ loginEmailSubmitRequest: loginEmailSubmitRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Generate OTP for the user
     * Generate OTP
     */
    async generateOTPRaw(requestParameters: GenerateOTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateOTPResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/generateOTP`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['generateOTPRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Generate OTP for the user
     * Generate OTP
     */
    async generateOTP(generateOTPRequest?: GenerateOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateOTPResponse> {
        const response = await this.generateOTPRaw({ generateOTPRequest: generateOTPRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Submit OTP for the user
     * Submit OTP
     */
    async submitOTPRaw(requestParameters: SubmitOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/submitOTP`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['loginOTPSubmitRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Submit OTP for the user
     * Submit OTP
     */
    async submitOTP(loginOTPSubmitRequest?: LoginOTPSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginTokenResponse> {
        const response = await this.submitOTPRaw({ loginOTPSubmitRequest: loginOTPSubmitRequest }, initOverrides);
        return await response.value();
    }

}
