/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PackageTest,
  PackageTestRequest,
  TestCategory,
  TestCategoryRequest,
  TestPackage,
  TestPackageRequest,
  TestSubtype,
  TestSubtypeRequest,
} from '../models/index';

export interface CreatePackageTestRequest {
    packageTestRequest: PackageTestRequest;
}

export interface CreateTestCategoryRequest {
    testCategoryRequest: TestCategoryRequest;
}

export interface CreateTestPackageRequest {
    testPackageRequest: TestPackageRequest;
}

export interface CreateTestSubtypeRequest {
    testSubtypeRequest: TestSubtypeRequest;
}

export interface DeletePackageTestRequest {
    id: number;
}

export interface DeleteTestCategoryRequest {
    id: number;
}

export interface DeleteTestPackageRequest {
    id: number;
}

export interface DeleteTestSubtypeRequest {
    id: number;
}

export interface GetAllPackageTestsRequest {
    packageId?: number;
    testSubtypeId?: number;
    categoryName?: string;
}

export interface GetAllTestPackagesRequest {
    minPrice?: number;
    maxPrice?: number;
    name?: string;
    description?: string;
}

export interface GetAllTestSubtypesRequest {
    categoryId?: number;
    categoryName?: string;
    minPrice?: number;
    maxPrice?: number;
    name?: string;
}

export interface GetPackageTestByIdRequest {
    id: number;
}

export interface GetTestCategoryByIdRequest {
    id: number;
}

export interface GetTestPackageByIdRequest {
    id: number;
}

export interface GetTestSubtypeByIdRequest {
    id: number;
}

export interface UpdateTestCategoryRequest {
    id: number;
    testCategoryRequest: TestCategoryRequest;
}

export interface UpdateTestPackageRequest {
    id: number;
    testPackageRequest: TestPackageRequest;
}

export interface UpdateTestSubtypeRequest {
    id: number;
    testSubtypeRequest: TestSubtypeRequest;
}

/**
 * CostManagementApi - interface
 * 
 * @export
 * @interface CostManagementApiInterface
 */
export interface CostManagementApiInterface {
    /**
     * 
     * @summary Create a new package test mapping
     * @param {PackageTestRequest} packageTestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    createPackageTestRaw(requestParameters: CreatePackageTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageTest>>;

    /**
     * Create a new package test mapping
     */
    createPackageTest(packageTestRequest: PackageTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageTest>;

    /**
     * 
     * @summary Create a new test category
     * @param {TestCategoryRequest} testCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    createTestCategoryRaw(requestParameters: CreateTestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCategory>>;

    /**
     * Create a new test category
     */
    createTestCategory(testCategoryRequest: TestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCategory>;

    /**
     * 
     * @summary Create a new test package
     * @param {TestPackageRequest} testPackageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    createTestPackageRaw(requestParameters: CreateTestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPackage>>;

    /**
     * Create a new test package
     */
    createTestPackage(testPackageRequest: TestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPackage>;

    /**
     * 
     * @summary Create a new test subtype
     * @param {TestSubtypeRequest} testSubtypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    createTestSubtypeRaw(requestParameters: CreateTestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestSubtype>>;

    /**
     * Create a new test subtype
     */
    createTestSubtype(testSubtypeRequest: TestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestSubtype>;

    /**
     * 
     * @summary Delete package test mapping
     * @param {number} id ID of the package test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    deletePackageTestRaw(requestParameters: DeletePackageTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete package test mapping
     */
    deletePackageTest(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete test category
     * @param {number} id ID of the test category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    deleteTestCategoryRaw(requestParameters: DeleteTestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete test category
     */
    deleteTestCategory(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete test package
     * @param {number} id ID of the test package
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    deleteTestPackageRaw(requestParameters: DeleteTestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete test package
     */
    deleteTestPackage(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete test subtype
     * @param {number} id ID of the test subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    deleteTestSubtypeRaw(requestParameters: DeleteTestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete test subtype
     */
    deleteTestSubtype(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get all package tests
     * @param {number} [packageId] Filter by package ID
     * @param {number} [testSubtypeId] Filter by test subtype ID
     * @param {string} [categoryName] Filter by category name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    getAllPackageTestsRaw(requestParameters: GetAllPackageTestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PackageTest>>>;

    /**
     * Get all package tests
     */
    getAllPackageTests(packageId?: number, testSubtypeId?: number, categoryName?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PackageTest>>;

    /**
     * 
     * @summary Get all test categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    getAllTestCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestCategory>>>;

    /**
     * Get all test categories
     */
    getAllTestCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestCategory>>;

    /**
     * 
     * @summary Get all test packages
     * @param {number} [minPrice] Minimum price filter
     * @param {number} [maxPrice] Maximum price filter
     * @param {string} [name] Search by name (case-insensitive)
     * @param {string} [description] Search by description (case-insensitive)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    getAllTestPackagesRaw(requestParameters: GetAllTestPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestPackage>>>;

    /**
     * Get all test packages
     */
    getAllTestPackages(minPrice?: number, maxPrice?: number, name?: string, description?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestPackage>>;

    /**
     * 
     * @summary Get all test subtypes
     * @param {number} [categoryId] Filter by category ID
     * @param {string} [categoryName] Filter by category name
     * @param {number} [minPrice] Minimum price filter
     * @param {number} [maxPrice] Maximum price filter
     * @param {string} [name] Search by name (case-insensitive)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    getAllTestSubtypesRaw(requestParameters: GetAllTestSubtypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestSubtype>>>;

    /**
     * Get all test subtypes
     */
    getAllTestSubtypes(categoryId?: number, categoryName?: string, minPrice?: number, maxPrice?: number, name?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestSubtype>>;

    /**
     * 
     * @summary Get package test by ID
     * @param {number} id ID of the package test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    getPackageTestByIdRaw(requestParameters: GetPackageTestByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageTest>>;

    /**
     * Get package test by ID
     */
    getPackageTestById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageTest>;

    /**
     * 
     * @summary Get test category by ID
     * @param {number} id ID of the test category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    getTestCategoryByIdRaw(requestParameters: GetTestCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCategory>>;

    /**
     * Get test category by ID
     */
    getTestCategoryById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCategory>;

    /**
     * 
     * @summary Get test package by ID
     * @param {number} id ID of the test package
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    getTestPackageByIdRaw(requestParameters: GetTestPackageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPackage>>;

    /**
     * Get test package by ID
     */
    getTestPackageById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPackage>;

    /**
     * 
     * @summary Get test subtype by ID
     * @param {number} id ID of the test subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    getTestSubtypeByIdRaw(requestParameters: GetTestSubtypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestSubtype>>;

    /**
     * Get test subtype by ID
     */
    getTestSubtypeById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestSubtype>;

    /**
     * 
     * @summary Update test category
     * @param {number} id ID of the test category
     * @param {TestCategoryRequest} testCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    updateTestCategoryRaw(requestParameters: UpdateTestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCategory>>;

    /**
     * Update test category
     */
    updateTestCategory(id: number, testCategoryRequest: TestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCategory>;

    /**
     * 
     * @summary Update test package
     * @param {number} id ID of the test package
     * @param {TestPackageRequest} testPackageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    updateTestPackageRaw(requestParameters: UpdateTestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPackage>>;

    /**
     * Update test package
     */
    updateTestPackage(id: number, testPackageRequest: TestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPackage>;

    /**
     * 
     * @summary Update test subtype
     * @param {number} id ID of the test subtype
     * @param {TestSubtypeRequest} testSubtypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostManagementApiInterface
     */
    updateTestSubtypeRaw(requestParameters: UpdateTestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestSubtype>>;

    /**
     * Update test subtype
     */
    updateTestSubtype(id: number, testSubtypeRequest: TestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestSubtype>;

}

/**
 * 
 */
export class CostManagementApi extends runtime.BaseAPI implements CostManagementApiInterface {

    /**
     * Create a new package test mapping
     */
    async createPackageTestRaw(requestParameters: CreatePackageTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageTest>> {
        if (requestParameters['packageTestRequest'] == null) {
            throw new runtime.RequiredError(
                'packageTestRequest',
                'Required parameter "packageTestRequest" was null or undefined when calling createPackageTest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/package-tests`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['packageTestRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new package test mapping
     */
    async createPackageTest(packageTestRequest: PackageTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageTest> {
        const response = await this.createPackageTestRaw({ packageTestRequest: packageTestRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new test category
     */
    async createTestCategoryRaw(requestParameters: CreateTestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCategory>> {
        if (requestParameters['testCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'testCategoryRequest',
                'Required parameter "testCategoryRequest" was null or undefined when calling createTestCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-categories`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['testCategoryRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new test category
     */
    async createTestCategory(testCategoryRequest: TestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCategory> {
        const response = await this.createTestCategoryRaw({ testCategoryRequest: testCategoryRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new test package
     */
    async createTestPackageRaw(requestParameters: CreateTestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPackage>> {
        if (requestParameters['testPackageRequest'] == null) {
            throw new runtime.RequiredError(
                'testPackageRequest',
                'Required parameter "testPackageRequest" was null or undefined when calling createTestPackage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-packages`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['testPackageRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new test package
     */
    async createTestPackage(testPackageRequest: TestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPackage> {
        const response = await this.createTestPackageRaw({ testPackageRequest: testPackageRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new test subtype
     */
    async createTestSubtypeRaw(requestParameters: CreateTestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestSubtype>> {
        if (requestParameters['testSubtypeRequest'] == null) {
            throw new runtime.RequiredError(
                'testSubtypeRequest',
                'Required parameter "testSubtypeRequest" was null or undefined when calling createTestSubtype().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-subtypes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['testSubtypeRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new test subtype
     */
    async createTestSubtype(testSubtypeRequest: TestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestSubtype> {
        const response = await this.createTestSubtypeRaw({ testSubtypeRequest: testSubtypeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete package test mapping
     */
    async deletePackageTestRaw(requestParameters: DeletePackageTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePackageTest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/package-tests/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete package test mapping
     */
    async deletePackageTest(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePackageTestRaw({ id: id }, initOverrides);
    }

    /**
     * Delete test category
     */
    async deleteTestCategoryRaw(requestParameters: DeleteTestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTestCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-categories/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete test category
     */
    async deleteTestCategory(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTestCategoryRaw({ id: id }, initOverrides);
    }

    /**
     * Delete test package
     */
    async deleteTestPackageRaw(requestParameters: DeleteTestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTestPackage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-packages/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete test package
     */
    async deleteTestPackage(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTestPackageRaw({ id: id }, initOverrides);
    }

    /**
     * Delete test subtype
     */
    async deleteTestSubtypeRaw(requestParameters: DeleteTestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTestSubtype().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-subtypes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete test subtype
     */
    async deleteTestSubtype(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTestSubtypeRaw({ id: id }, initOverrides);
    }

    /**
     * Get all package tests
     */
    async getAllPackageTestsRaw(requestParameters: GetAllPackageTestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PackageTest>>> {
        const queryParameters: any = {};

        if (requestParameters['packageId'] != null) {
            queryParameters['packageId'] = requestParameters['packageId'];
        }

        if (requestParameters['testSubtypeId'] != null) {
            queryParameters['testSubtypeId'] = requestParameters['testSubtypeId'];
        }

        if (requestParameters['categoryName'] != null) {
            queryParameters['categoryName'] = requestParameters['categoryName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/package-tests`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all package tests
     */
    async getAllPackageTests(packageId?: number, testSubtypeId?: number, categoryName?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PackageTest>> {
        const response = await this.getAllPackageTestsRaw({ packageId: packageId, testSubtypeId: testSubtypeId, categoryName: categoryName }, initOverrides);
        return await response.value();
    }

    /**
     * Get all test categories
     */
    async getAllTestCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-categories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all test categories
     */
    async getAllTestCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestCategory>> {
        const response = await this.getAllTestCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all test packages
     */
    async getAllTestPackagesRaw(requestParameters: GetAllTestPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestPackage>>> {
        const queryParameters: any = {};

        if (requestParameters['minPrice'] != null) {
            queryParameters['minPrice'] = requestParameters['minPrice'];
        }

        if (requestParameters['maxPrice'] != null) {
            queryParameters['maxPrice'] = requestParameters['maxPrice'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-packages`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all test packages
     */
    async getAllTestPackages(minPrice?: number, maxPrice?: number, name?: string, description?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestPackage>> {
        const response = await this.getAllTestPackagesRaw({ minPrice: minPrice, maxPrice: maxPrice, name: name, description: description }, initOverrides);
        return await response.value();
    }

    /**
     * Get all test subtypes
     */
    async getAllTestSubtypesRaw(requestParameters: GetAllTestSubtypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestSubtype>>> {
        const queryParameters: any = {};

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['categoryName'] != null) {
            queryParameters['categoryName'] = requestParameters['categoryName'];
        }

        if (requestParameters['minPrice'] != null) {
            queryParameters['minPrice'] = requestParameters['minPrice'];
        }

        if (requestParameters['maxPrice'] != null) {
            queryParameters['maxPrice'] = requestParameters['maxPrice'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-subtypes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all test subtypes
     */
    async getAllTestSubtypes(categoryId?: number, categoryName?: string, minPrice?: number, maxPrice?: number, name?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestSubtype>> {
        const response = await this.getAllTestSubtypesRaw({ categoryId: categoryId, categoryName: categoryName, minPrice: minPrice, maxPrice: maxPrice, name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Get package test by ID
     */
    async getPackageTestByIdRaw(requestParameters: GetPackageTestByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageTest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPackageTestById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/package-tests/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get package test by ID
     */
    async getPackageTestById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageTest> {
        const response = await this.getPackageTestByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get test category by ID
     */
    async getTestCategoryByIdRaw(requestParameters: GetTestCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTestCategoryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-categories/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get test category by ID
     */
    async getTestCategoryById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCategory> {
        const response = await this.getTestCategoryByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get test package by ID
     */
    async getTestPackageByIdRaw(requestParameters: GetTestPackageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPackage>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTestPackageById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-packages/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get test package by ID
     */
    async getTestPackageById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPackage> {
        const response = await this.getTestPackageByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get test subtype by ID
     */
    async getTestSubtypeByIdRaw(requestParameters: GetTestSubtypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestSubtype>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTestSubtypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-subtypes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get test subtype by ID
     */
    async getTestSubtypeById(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestSubtype> {
        const response = await this.getTestSubtypeByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update test category
     */
    async updateTestCategoryRaw(requestParameters: UpdateTestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTestCategory().'
            );
        }

        if (requestParameters['testCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'testCategoryRequest',
                'Required parameter "testCategoryRequest" was null or undefined when calling updateTestCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-categories/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['testCategoryRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update test category
     */
    async updateTestCategory(id: number, testCategoryRequest: TestCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCategory> {
        const response = await this.updateTestCategoryRaw({ id: id, testCategoryRequest: testCategoryRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update test package
     */
    async updateTestPackageRaw(requestParameters: UpdateTestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPackage>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTestPackage().'
            );
        }

        if (requestParameters['testPackageRequest'] == null) {
            throw new runtime.RequiredError(
                'testPackageRequest',
                'Required parameter "testPackageRequest" was null or undefined when calling updateTestPackage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-packages/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['testPackageRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update test package
     */
    async updateTestPackage(id: number, testPackageRequest: TestPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPackage> {
        const response = await this.updateTestPackageRaw({ id: id, testPackageRequest: testPackageRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update test subtype
     */
    async updateTestSubtypeRaw(requestParameters: UpdateTestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestSubtype>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTestSubtype().'
            );
        }

        if (requestParameters['testSubtypeRequest'] == null) {
            throw new runtime.RequiredError(
                'testSubtypeRequest',
                'Required parameter "testSubtypeRequest" was null or undefined when calling updateTestSubtype().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/costs/test-subtypes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['testSubtypeRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update test subtype
     */
    async updateTestSubtype(id: number, testSubtypeRequest: TestSubtypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestSubtype> {
        const response = await this.updateTestSubtypeRaw({ id: id, testSubtypeRequest: testSubtypeRequest }, initOverrides);
        return await response.value();
    }

}
