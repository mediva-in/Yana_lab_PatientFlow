/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TerminalTemplate,
} from '../models/index';

export interface GetTerminalTemplateByIdRequest {
    terminalTemplateId: number;
}

/**
 * TerminalTemplateApi - interface
 * 
 * @export
 * @interface TerminalTemplateApiInterface
 */
export interface TerminalTemplateApiInterface {
    /**
     * 
     * @summary Get all terminal templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalTemplateApiInterface
     */
    getAllTerminalTemplatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TerminalTemplate>>>;

    /**
     * Get all terminal templates
     */
    getAllTerminalTemplates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TerminalTemplate>>;

    /**
     * 
     * @summary Get a single terminal template by ID
     * @param {number} terminalTemplateId ID of the terminal template to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalTemplateApiInterface
     */
    getTerminalTemplateByIdRaw(requestParameters: GetTerminalTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalTemplate>>;

    /**
     * Get a single terminal template by ID
     */
    getTerminalTemplateById(terminalTemplateId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalTemplate>;

}

/**
 * 
 */
export class TerminalTemplateApi extends runtime.BaseAPI implements TerminalTemplateApiInterface {

    /**
     * Get all terminal templates
     */
    async getAllTerminalTemplatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TerminalTemplate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal-template/get-all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all terminal templates
     */
    async getAllTerminalTemplates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TerminalTemplate>> {
        const response = await this.getAllTerminalTemplatesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a single terminal template by ID
     */
    async getTerminalTemplateByIdRaw(requestParameters: GetTerminalTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalTemplate>> {
        if (requestParameters['terminalTemplateId'] == null) {
            throw new runtime.RequiredError(
                'terminalTemplateId',
                'Required parameter "terminalTemplateId" was null or undefined when calling getTerminalTemplateById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal-templates/{terminalTemplateId}`;
        urlPath = urlPath.replace(`{${"terminalTemplateId"}}`, encodeURIComponent(String(requestParameters['terminalTemplateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a single terminal template by ID
     */
    async getTerminalTemplateById(terminalTemplateId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalTemplate> {
        const response = await this.getTerminalTemplateByIdRaw({ terminalTemplateId: terminalTemplateId }, initOverrides);
        return await response.value();
    }

}
