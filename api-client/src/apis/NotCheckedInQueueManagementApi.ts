/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetNotCheckedInCount200Response,
  MoveToActiveRequest,
  MoveToActiveResponse,
  MoveToNotCheckedInRequest,
  MoveToNotCheckedInResponse,
  NotCheckedInPatientEntry,
  RemoveNotCheckedInResponse,
  UpdateNotCheckedInTimingRequest,
} from '../models/index';

export interface GetNotCheckedInPatientRequest {
    patientId: string;
}

export interface MovePatientToActiveRequest {
    moveToActiveRequest: MoveToActiveRequest;
}

export interface MovePatientToNotCheckedInRequest {
    moveToNotCheckedInRequest: MoveToNotCheckedInRequest;
}

export interface RemoveNotCheckedInPatientRequest {
    patientId: string;
}

export interface UpdateNotCheckedInPatientTimingRequest {
    patientId: string;
    updateNotCheckedInTimingRequest: UpdateNotCheckedInTimingRequest;
}

/**
 * NotCheckedInQueueManagementApi - interface
 * 
 * @export
 * @interface NotCheckedInQueueManagementApiInterface
 */
export interface NotCheckedInQueueManagementApiInterface {
    /**
     * Retrieves all patients currently in the not-checked-in queue from Redis hash storage. Returns patients with their original timing and queue information. Hospital ID is automatically obtained from the request context. 
     * @summary Get all patients in not checked in queue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotCheckedInQueueManagementApiInterface
     */
    getAllNotCheckedInPatientsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotCheckedInPatientEntry>>>;

    /**
     * Retrieves all patients currently in the not-checked-in queue from Redis hash storage. Returns patients with their original timing and queue information. Hospital ID is automatically obtained from the request context. 
     * Get all patients in not checked in queue
     */
    getAllNotCheckedInPatients(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotCheckedInPatientEntry>>;

    /**
     * Returns the total number of patients currently in the not-checked-in queue. Hospital ID is automatically obtained from the request context. 
     * @summary Get count of patients in not checked in queue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotCheckedInQueueManagementApiInterface
     */
    getNotCheckedInCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNotCheckedInCount200Response>>;

    /**
     * Returns the total number of patients currently in the not-checked-in queue. Hospital ID is automatically obtained from the request context. 
     * Get count of patients in not checked in queue
     */
    getNotCheckedInCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNotCheckedInCount200Response>;

    /**
     * Retrieves a specific patient from the not-checked-in queue by their patient ID. Hospital ID is automatically obtained from the request context. 
     * @summary Get specific patient from not checked in queue
     * @param {string} patientId Unique identifier for the patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotCheckedInQueueManagementApiInterface
     */
    getNotCheckedInPatientRaw(requestParameters: GetNotCheckedInPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotCheckedInPatientEntry>>;

    /**
     * Retrieves a specific patient from the not-checked-in queue by their patient ID. Hospital ID is automatically obtained from the request context. 
     * Get specific patient from not checked in queue
     */
    getNotCheckedInPatient(patientId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotCheckedInPatientEntry>;

    /**
     * Moves a patient from the not-checked-in queue (Redis hash) back to the active queue (Redis sorted set). The system validates the patient\'s timing and adds them to the appropriate position in the sorted set. All downstream patients\' estimated start times are recalculated. Hospital ID is automatically obtained from the request context. 
     * @summary Move patient from not checked in to active queue
     * @param {MoveToActiveRequest} moveToActiveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotCheckedInQueueManagementApiInterface
     */
    movePatientToActiveRaw(requestParameters: MovePatientToActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveToActiveResponse>>;

    /**
     * Moves a patient from the not-checked-in queue (Redis hash) back to the active queue (Redis sorted set). The system validates the patient\'s timing and adds them to the appropriate position in the sorted set. All downstream patients\' estimated start times are recalculated. Hospital ID is automatically obtained from the request context. 
     * Move patient from not checked in to active queue
     */
    movePatientToActive(moveToActiveRequest: MoveToActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveToActiveResponse>;

    /**
     * Moves a patient from the active queue (Redis sorted set) to the not-checked-in queue (Redis hash). The patient is removed from the sorted set and stored in Redis hash with their original timing information. This operation is useful when patients are not ready or need to be rescheduled. Hospital ID is automatically obtained from the request context. 
     * @summary Move patient from active queue to not checked in
     * @param {MoveToNotCheckedInRequest} moveToNotCheckedInRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotCheckedInQueueManagementApiInterface
     */
    movePatientToNotCheckedInRaw(requestParameters: MovePatientToNotCheckedInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveToNotCheckedInResponse>>;

    /**
     * Moves a patient from the active queue (Redis sorted set) to the not-checked-in queue (Redis hash). The patient is removed from the sorted set and stored in Redis hash with their original timing information. This operation is useful when patients are not ready or need to be rescheduled. Hospital ID is automatically obtained from the request context. 
     * Move patient from active queue to not checked in
     */
    movePatientToNotCheckedIn(moveToNotCheckedInRequest: MoveToNotCheckedInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveToNotCheckedInResponse>;

    /**
     * Permanently removes a patient from the not-checked-in queue. This action cannot be undone and the patient will need to be re-added if needed. Hospital ID is automatically obtained from the request context. 
     * @summary Remove patient from not checked in queue
     * @param {string} patientId Unique identifier for the patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotCheckedInQueueManagementApiInterface
     */
    removeNotCheckedInPatientRaw(requestParameters: RemoveNotCheckedInPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveNotCheckedInResponse>>;

    /**
     * Permanently removes a patient from the not-checked-in queue. This action cannot be undone and the patient will need to be re-added if needed. Hospital ID is automatically obtained from the request context. 
     * Remove patient from not checked in queue
     */
    removeNotCheckedInPatient(patientId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveNotCheckedInResponse>;

    /**
     * Updates the timing information for a patient in the not-checked-in queue. This is useful when rescheduling patients or adjusting their expected return time. Hospital ID is automatically obtained from the request context. 
     * @summary Update patient timing in not checked in queue
     * @param {string} patientId Unique identifier for the patient
     * @param {UpdateNotCheckedInTimingRequest} updateNotCheckedInTimingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotCheckedInQueueManagementApiInterface
     */
    updateNotCheckedInPatientTimingRaw(requestParameters: UpdateNotCheckedInPatientTimingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotCheckedInPatientEntry>>;

    /**
     * Updates the timing information for a patient in the not-checked-in queue. This is useful when rescheduling patients or adjusting their expected return time. Hospital ID is automatically obtained from the request context. 
     * Update patient timing in not checked in queue
     */
    updateNotCheckedInPatientTiming(patientId: string, updateNotCheckedInTimingRequest: UpdateNotCheckedInTimingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotCheckedInPatientEntry>;

}

/**
 * 
 */
export class NotCheckedInQueueManagementApi extends runtime.BaseAPI implements NotCheckedInQueueManagementApiInterface {

    /**
     * Retrieves all patients currently in the not-checked-in queue from Redis hash storage. Returns patients with their original timing and queue information. Hospital ID is automatically obtained from the request context. 
     * Get all patients in not checked in queue
     */
    async getAllNotCheckedInPatientsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotCheckedInPatientEntry>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/not-checked-in/get-all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all patients currently in the not-checked-in queue from Redis hash storage. Returns patients with their original timing and queue information. Hospital ID is automatically obtained from the request context. 
     * Get all patients in not checked in queue
     */
    async getAllNotCheckedInPatients(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotCheckedInPatientEntry>> {
        const response = await this.getAllNotCheckedInPatientsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the total number of patients currently in the not-checked-in queue. Hospital ID is automatically obtained from the request context. 
     * Get count of patients in not checked in queue
     */
    async getNotCheckedInCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNotCheckedInCount200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/not-checked-in/count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the total number of patients currently in the not-checked-in queue. Hospital ID is automatically obtained from the request context. 
     * Get count of patients in not checked in queue
     */
    async getNotCheckedInCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNotCheckedInCount200Response> {
        const response = await this.getNotCheckedInCountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific patient from the not-checked-in queue by their patient ID. Hospital ID is automatically obtained from the request context. 
     * Get specific patient from not checked in queue
     */
    async getNotCheckedInPatientRaw(requestParameters: GetNotCheckedInPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotCheckedInPatientEntry>> {
        if (requestParameters['patientId'] == null) {
            throw new runtime.RequiredError(
                'patientId',
                'Required parameter "patientId" was null or undefined when calling getNotCheckedInPatient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/not-checked-in/get-patient/{patientId}`;
        urlPath = urlPath.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters['patientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific patient from the not-checked-in queue by their patient ID. Hospital ID is automatically obtained from the request context. 
     * Get specific patient from not checked in queue
     */
    async getNotCheckedInPatient(patientId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotCheckedInPatientEntry> {
        const response = await this.getNotCheckedInPatientRaw({ patientId: patientId }, initOverrides);
        return await response.value();
    }

    /**
     * Moves a patient from the not-checked-in queue (Redis hash) back to the active queue (Redis sorted set). The system validates the patient\'s timing and adds them to the appropriate position in the sorted set. All downstream patients\' estimated start times are recalculated. Hospital ID is automatically obtained from the request context. 
     * Move patient from not checked in to active queue
     */
    async movePatientToActiveRaw(requestParameters: MovePatientToActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveToActiveResponse>> {
        if (requestParameters['moveToActiveRequest'] == null) {
            throw new runtime.RequiredError(
                'moveToActiveRequest',
                'Required parameter "moveToActiveRequest" was null or undefined when calling movePatientToActive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/not-checked-in/move-to-active`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['moveToActiveRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Moves a patient from the not-checked-in queue (Redis hash) back to the active queue (Redis sorted set). The system validates the patient\'s timing and adds them to the appropriate position in the sorted set. All downstream patients\' estimated start times are recalculated. Hospital ID is automatically obtained from the request context. 
     * Move patient from not checked in to active queue
     */
    async movePatientToActive(moveToActiveRequest: MoveToActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveToActiveResponse> {
        const response = await this.movePatientToActiveRaw({ moveToActiveRequest: moveToActiveRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Moves a patient from the active queue (Redis sorted set) to the not-checked-in queue (Redis hash). The patient is removed from the sorted set and stored in Redis hash with their original timing information. This operation is useful when patients are not ready or need to be rescheduled. Hospital ID is automatically obtained from the request context. 
     * Move patient from active queue to not checked in
     */
    async movePatientToNotCheckedInRaw(requestParameters: MovePatientToNotCheckedInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveToNotCheckedInResponse>> {
        if (requestParameters['moveToNotCheckedInRequest'] == null) {
            throw new runtime.RequiredError(
                'moveToNotCheckedInRequest',
                'Required parameter "moveToNotCheckedInRequest" was null or undefined when calling movePatientToNotCheckedIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/not-checked-in/move-to-not-checked-in`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['moveToNotCheckedInRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Moves a patient from the active queue (Redis sorted set) to the not-checked-in queue (Redis hash). The patient is removed from the sorted set and stored in Redis hash with their original timing information. This operation is useful when patients are not ready or need to be rescheduled. Hospital ID is automatically obtained from the request context. 
     * Move patient from active queue to not checked in
     */
    async movePatientToNotCheckedIn(moveToNotCheckedInRequest: MoveToNotCheckedInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveToNotCheckedInResponse> {
        const response = await this.movePatientToNotCheckedInRaw({ moveToNotCheckedInRequest: moveToNotCheckedInRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Permanently removes a patient from the not-checked-in queue. This action cannot be undone and the patient will need to be re-added if needed. Hospital ID is automatically obtained from the request context. 
     * Remove patient from not checked in queue
     */
    async removeNotCheckedInPatientRaw(requestParameters: RemoveNotCheckedInPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveNotCheckedInResponse>> {
        if (requestParameters['patientId'] == null) {
            throw new runtime.RequiredError(
                'patientId',
                'Required parameter "patientId" was null or undefined when calling removeNotCheckedInPatient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/not-checked-in/remove/{patientId}`;
        urlPath = urlPath.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters['patientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Permanently removes a patient from the not-checked-in queue. This action cannot be undone and the patient will need to be re-added if needed. Hospital ID is automatically obtained from the request context. 
     * Remove patient from not checked in queue
     */
    async removeNotCheckedInPatient(patientId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveNotCheckedInResponse> {
        const response = await this.removeNotCheckedInPatientRaw({ patientId: patientId }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the timing information for a patient in the not-checked-in queue. This is useful when rescheduling patients or adjusting their expected return time. Hospital ID is automatically obtained from the request context. 
     * Update patient timing in not checked in queue
     */
    async updateNotCheckedInPatientTimingRaw(requestParameters: UpdateNotCheckedInPatientTimingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotCheckedInPatientEntry>> {
        if (requestParameters['patientId'] == null) {
            throw new runtime.RequiredError(
                'patientId',
                'Required parameter "patientId" was null or undefined when calling updateNotCheckedInPatientTiming().'
            );
        }

        if (requestParameters['updateNotCheckedInTimingRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNotCheckedInTimingRequest',
                'Required parameter "updateNotCheckedInTimingRequest" was null or undefined when calling updateNotCheckedInPatientTiming().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/not-checked-in/update-timing/{patientId}`;
        urlPath = urlPath.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters['patientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateNotCheckedInTimingRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the timing information for a patient in the not-checked-in queue. This is useful when rescheduling patients or adjusting their expected return time. Hospital ID is automatically obtained from the request context. 
     * Update patient timing in not checked in queue
     */
    async updateNotCheckedInPatientTiming(patientId: string, updateNotCheckedInTimingRequest: UpdateNotCheckedInTimingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotCheckedInPatientEntry> {
        const response = await this.updateNotCheckedInPatientTimingRaw({ patientId: patientId, updateNotCheckedInTimingRequest: updateNotCheckedInTimingRequest }, initOverrides);
        return await response.value();
    }

}
