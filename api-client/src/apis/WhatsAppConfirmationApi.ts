/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SuperMessageProUltraMax,
} from '../models/index';

export interface ApiWhatsappConfirmationDeleteIdDeleteRequest {
    id: number;
}

export interface ApiWhatsappConfirmationSendMessageIdPostRequest {
    id: number;
}

/**
 * WhatsAppConfirmationApi - interface
 * 
 * @export
 * @interface WhatsAppConfirmationApiInterface
 */
export interface WhatsAppConfirmationApiInterface {
    /**
     * Permanently deletes a WhatsApp message confirmation from Redis. This action cannot be undone. 
     * @summary Delete a WhatsApp message confirmation
     * @param {number} id Unique identifier of the message confirmation to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsAppConfirmationApiInterface
     */
    apiWhatsappConfirmationDeleteIdDeleteRaw(requestParameters: ApiWhatsappConfirmationDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Permanently deletes a WhatsApp message confirmation from Redis. This action cannot be undone. 
     * Delete a WhatsApp message confirmation
     */
    apiWhatsappConfirmationDeleteIdDelete(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Retrieves all pending WhatsApp message confirmations from Redis. These are messages that have been logged by queue operations and are waiting to be sent. 
     * @summary Get all WhatsApp message confirmations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsAppConfirmationApiInterface
     */
    apiWhatsappConfirmationGetAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SuperMessageProUltraMax>>>;

    /**
     * Retrieves all pending WhatsApp message confirmations from Redis. These are messages that have been logged by queue operations and are waiting to be sent. 
     * Get all WhatsApp message confirmations
     */
    apiWhatsappConfirmationGetAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SuperMessageProUltraMax>>;

    /**
     * Sends a WhatsApp message based on the confirmation entry and then deletes it from Redis. The message type determines which WhatsApp service method is called. 
     * @summary Send a WhatsApp message confirmation
     * @param {number} id Unique identifier of the message confirmation to send
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsAppConfirmationApiInterface
     */
    apiWhatsappConfirmationSendMessageIdPostRaw(requestParameters: ApiWhatsappConfirmationSendMessageIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Sends a WhatsApp message based on the confirmation entry and then deletes it from Redis. The message type determines which WhatsApp service method is called. 
     * Send a WhatsApp message confirmation
     */
    apiWhatsappConfirmationSendMessageIdPost(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class WhatsAppConfirmationApi extends runtime.BaseAPI implements WhatsAppConfirmationApiInterface {

    /**
     * Permanently deletes a WhatsApp message confirmation from Redis. This action cannot be undone. 
     * Delete a WhatsApp message confirmation
     */
    async apiWhatsappConfirmationDeleteIdDeleteRaw(requestParameters: ApiWhatsappConfirmationDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWhatsappConfirmationDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/whatsapp-confirmation/delete/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Permanently deletes a WhatsApp message confirmation from Redis. This action cannot be undone. 
     * Delete a WhatsApp message confirmation
     */
    async apiWhatsappConfirmationDeleteIdDelete(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiWhatsappConfirmationDeleteIdDeleteRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all pending WhatsApp message confirmations from Redis. These are messages that have been logged by queue operations and are waiting to be sent. 
     * Get all WhatsApp message confirmations
     */
    async apiWhatsappConfirmationGetAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SuperMessageProUltraMax>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/whatsapp-confirmation/get-all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all pending WhatsApp message confirmations from Redis. These are messages that have been logged by queue operations and are waiting to be sent. 
     * Get all WhatsApp message confirmations
     */
    async apiWhatsappConfirmationGetAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SuperMessageProUltraMax>> {
        const response = await this.apiWhatsappConfirmationGetAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sends a WhatsApp message based on the confirmation entry and then deletes it from Redis. The message type determines which WhatsApp service method is called. 
     * Send a WhatsApp message confirmation
     */
    async apiWhatsappConfirmationSendMessageIdPostRaw(requestParameters: ApiWhatsappConfirmationSendMessageIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWhatsappConfirmationSendMessageIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/whatsapp-confirmation/send-message/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sends a WhatsApp message based on the confirmation entry and then deletes it from Redis. The message type determines which WhatsApp service method is called. 
     * Send a WhatsApp message confirmation
     */
    async apiWhatsappConfirmationSendMessageIdPost(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiWhatsappConfirmationSendMessageIdPostRaw({ id: id }, initOverrides);
        return await response.value();
    }

}
