/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TerminalAttributeData,
  TerminalAttributeDataCreate,
  TerminalAttributeFieldData,
  TerminalAttributeFieldDataCreate,
  TerminalData,
  TerminalDataCreate,
} from '../models/index';

export interface CreateTerminalDataRequest {
    terminalDataCreate: TerminalDataCreate;
}

export interface GetTerminalDataByIdRequest {
    terminalDataId: number;
}

export interface ModifyTerminalAttributeDataRequest {
    terminalAttributeDataCreate: TerminalAttributeDataCreate;
}

export interface ModifyTerminalAttributeFieldDataRequest {
    terminalAttributeFieldDataCreate: TerminalAttributeFieldDataCreate;
}

/**
 * TerminalDataApi - interface
 * 
 * @export
 * @interface TerminalDataApiInterface
 */
export interface TerminalDataApiInterface {
    /**
     * 
     * @summary Create a TerminalAttributeData entry
     * @param {TerminalDataCreate} terminalDataCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalDataApiInterface
     */
    createTerminalDataRaw(requestParameters: CreateTerminalDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalData>>;

    /**
     * Create a TerminalAttributeData entry
     */
    createTerminalData(terminalDataCreate: TerminalDataCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalData>;

    /**
     * 
     * @summary Get TerminalData by ID with nested attribute data
     * @param {number} terminalDataId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalDataApiInterface
     */
    getTerminalDataByIdRaw(requestParameters: GetTerminalDataByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalData>>;

    /**
     * Get TerminalData by ID with nested attribute data
     */
    getTerminalDataById(terminalDataId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalData>;

    /**
     * 
     * @summary Create a TerminalAttributeData entry
     * @param {TerminalAttributeDataCreate} terminalAttributeDataCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalDataApiInterface
     */
    modifyTerminalAttributeDataRaw(requestParameters: ModifyTerminalAttributeDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalAttributeData>>;

    /**
     * Create a TerminalAttributeData entry
     */
    modifyTerminalAttributeData(terminalAttributeDataCreate: TerminalAttributeDataCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalAttributeData>;

    /**
     * 
     * @summary Create a TerminalAttributeFieldData entry
     * @param {TerminalAttributeFieldDataCreate} terminalAttributeFieldDataCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalDataApiInterface
     */
    modifyTerminalAttributeFieldDataRaw(requestParameters: ModifyTerminalAttributeFieldDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalAttributeFieldData>>;

    /**
     * Create a TerminalAttributeFieldData entry
     */
    modifyTerminalAttributeFieldData(terminalAttributeFieldDataCreate: TerminalAttributeFieldDataCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalAttributeFieldData>;

}

/**
 * 
 */
export class TerminalDataApi extends runtime.BaseAPI implements TerminalDataApiInterface {

    /**
     * Create a TerminalAttributeData entry
     */
    async createTerminalDataRaw(requestParameters: CreateTerminalDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalData>> {
        if (requestParameters['terminalDataCreate'] == null) {
            throw new runtime.RequiredError(
                'terminalDataCreate',
                'Required parameter "terminalDataCreate" was null or undefined when calling createTerminalData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal-data/create-terminal-data`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['terminalDataCreate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a TerminalAttributeData entry
     */
    async createTerminalData(terminalDataCreate: TerminalDataCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalData> {
        const response = await this.createTerminalDataRaw({ terminalDataCreate: terminalDataCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Get TerminalData by ID with nested attribute data
     */
    async getTerminalDataByIdRaw(requestParameters: GetTerminalDataByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalData>> {
        if (requestParameters['terminalDataId'] == null) {
            throw new runtime.RequiredError(
                'terminalDataId',
                'Required parameter "terminalDataId" was null or undefined when calling getTerminalDataById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal-data/{terminalDataId}`;
        urlPath = urlPath.replace(`{${"terminalDataId"}}`, encodeURIComponent(String(requestParameters['terminalDataId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get TerminalData by ID with nested attribute data
     */
    async getTerminalDataById(terminalDataId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalData> {
        const response = await this.getTerminalDataByIdRaw({ terminalDataId: terminalDataId }, initOverrides);
        return await response.value();
    }

    /**
     * Create a TerminalAttributeData entry
     */
    async modifyTerminalAttributeDataRaw(requestParameters: ModifyTerminalAttributeDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalAttributeData>> {
        if (requestParameters['terminalAttributeDataCreate'] == null) {
            throw new runtime.RequiredError(
                'terminalAttributeDataCreate',
                'Required parameter "terminalAttributeDataCreate" was null or undefined when calling modifyTerminalAttributeData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal-data/create-terminal-attribute-data`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['terminalAttributeDataCreate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a TerminalAttributeData entry
     */
    async modifyTerminalAttributeData(terminalAttributeDataCreate: TerminalAttributeDataCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalAttributeData> {
        const response = await this.modifyTerminalAttributeDataRaw({ terminalAttributeDataCreate: terminalAttributeDataCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Create a TerminalAttributeFieldData entry
     */
    async modifyTerminalAttributeFieldDataRaw(requestParameters: ModifyTerminalAttributeFieldDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalAttributeFieldData>> {
        if (requestParameters['terminalAttributeFieldDataCreate'] == null) {
            throw new runtime.RequiredError(
                'terminalAttributeFieldDataCreate',
                'Required parameter "terminalAttributeFieldDataCreate" was null or undefined when calling modifyTerminalAttributeFieldData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal-data/terminal-attribute-field-data`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['terminalAttributeFieldDataCreate'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a TerminalAttributeFieldData entry
     */
    async modifyTerminalAttributeFieldData(terminalAttributeFieldDataCreate: TerminalAttributeFieldDataCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalAttributeFieldData> {
        const response = await this.modifyTerminalAttributeFieldDataRaw({ terminalAttributeFieldDataCreate: terminalAttributeFieldDataCreate }, initOverrides);
        return await response.value();
    }

}
