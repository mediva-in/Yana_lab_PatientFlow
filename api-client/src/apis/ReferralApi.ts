/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ReferralAnalyticsResponse,
  ReferralCreateRequest,
  ReferralResponse,
  ReferralUpdateRequest,
} from '../models/index';

export interface CreateReferralRequest {
    referralCreateRequest: ReferralCreateRequest;
}

export interface DeleteReferralRequest {
    id: string;
}

export interface GetAllReferralsRequest {
    search?: string;
    referralType?: GetAllReferralsReferralTypeEnum;
}

export interface GetReferralByIdRequest {
    id: string;
}

export interface UpdateReferralRequest {
    id: string;
    referralUpdateRequest: ReferralUpdateRequest;
}

/**
 * ReferralApi - interface
 * 
 * @export
 * @interface ReferralApiInterface
 */
export interface ReferralApiInterface {
    /**
     * 
     * @summary Create a new referral
     * @param {ReferralCreateRequest} referralCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApiInterface
     */
    createReferralRaw(requestParameters: CreateReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralResponse>>;

    /**
     * Create a new referral
     */
    createReferral(referralCreateRequest: ReferralCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralResponse>;

    /**
     * 
     * @summary Delete a referral
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApiInterface
     */
    deleteReferralRaw(requestParameters: DeleteReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a referral
     */
    deleteReferral(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get all referrals
     * @param {string} [search] Search term for name or description
     * @param {'REFERRAL' | 'CAMPAIGN'} [referralType] Filter by referral type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApiInterface
     */
    getAllReferralsRaw(requestParameters: GetAllReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReferralResponse>>>;

    /**
     * Get all referrals
     */
    getAllReferrals(search?: string, referralType?: GetAllReferralsReferralTypeEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReferralResponse>>;

    /**
     * 
     * @summary Get referral analytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApiInterface
     */
    getReferralAnalyticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralAnalyticsResponse>>;

    /**
     * Get referral analytics
     */
    getReferralAnalytics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralAnalyticsResponse>;

    /**
     * 
     * @summary Get referral by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApiInterface
     */
    getReferralByIdRaw(requestParameters: GetReferralByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralResponse>>;

    /**
     * Get referral by ID
     */
    getReferralById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralResponse>;

    /**
     * 
     * @summary Update a referral
     * @param {string} id 
     * @param {ReferralUpdateRequest} referralUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApiInterface
     */
    updateReferralRaw(requestParameters: UpdateReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralResponse>>;

    /**
     * Update a referral
     */
    updateReferral(id: string, referralUpdateRequest: ReferralUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralResponse>;

}

/**
 * 
 */
export class ReferralApi extends runtime.BaseAPI implements ReferralApiInterface {

    /**
     * Create a new referral
     */
    async createReferralRaw(requestParameters: CreateReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralResponse>> {
        if (requestParameters['referralCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'referralCreateRequest',
                'Required parameter "referralCreateRequest" was null or undefined when calling createReferral().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/referrals`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['referralCreateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new referral
     */
    async createReferral(referralCreateRequest: ReferralCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralResponse> {
        const response = await this.createReferralRaw({ referralCreateRequest: referralCreateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a referral
     */
    async deleteReferralRaw(requestParameters: DeleteReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteReferral().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/referrals/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a referral
     */
    async deleteReferral(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReferralRaw({ id: id }, initOverrides);
    }

    /**
     * Get all referrals
     */
    async getAllReferralsRaw(requestParameters: GetAllReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReferralResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['referralType'] != null) {
            queryParameters['referralType'] = requestParameters['referralType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/referrals`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all referrals
     */
    async getAllReferrals(search?: string, referralType?: GetAllReferralsReferralTypeEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReferralResponse>> {
        const response = await this.getAllReferralsRaw({ search: search, referralType: referralType }, initOverrides);
        return await response.value();
    }

    /**
     * Get referral analytics
     */
    async getReferralAnalyticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralAnalyticsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/referrals/analytics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get referral analytics
     */
    async getReferralAnalytics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralAnalyticsResponse> {
        const response = await this.getReferralAnalyticsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get referral by ID
     */
    async getReferralByIdRaw(requestParameters: GetReferralByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getReferralById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/referrals/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get referral by ID
     */
    async getReferralById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralResponse> {
        const response = await this.getReferralByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update a referral
     */
    async updateReferralRaw(requestParameters: UpdateReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferralResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateReferral().'
            );
        }

        if (requestParameters['referralUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'referralUpdateRequest',
                'Required parameter "referralUpdateRequest" was null or undefined when calling updateReferral().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/referrals/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['referralUpdateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a referral
     */
    async updateReferral(id: string, referralUpdateRequest: ReferralUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferralResponse> {
        const response = await this.updateReferralRaw({ id: id, referralUpdateRequest: referralUpdateRequest }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllReferralsReferralTypeEnum = {
    Referral: 'REFERRAL',
    Campaign: 'CAMPAIGN'
} as const;
export type GetAllReferralsReferralTypeEnum = typeof GetAllReferralsReferralTypeEnum[keyof typeof GetAllReferralsReferralTypeEnum];
