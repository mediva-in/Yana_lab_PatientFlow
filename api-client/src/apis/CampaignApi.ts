/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CampaignCreateRequest,
  CampaignResponse,
  CampaignUpdateRequest,
  ErrorResponse,
} from '../models/index';

export interface CreateCampaignRequest {
    campaignCreateRequest: CampaignCreateRequest;
}

export interface DeleteCampaignRequest {
    id: string;
}

export interface GetAllCampaignsRequest {
    search?: string;
    active?: boolean;
}

export interface GetCampaignByIdRequest {
    id: string;
}

export interface UpdateCampaignRequest {
    id: string;
    campaignUpdateRequest: CampaignUpdateRequest;
}

/**
 * CampaignApi - interface
 * 
 * @export
 * @interface CampaignApiInterface
 */
export interface CampaignApiInterface {
    /**
     * 
     * @summary Create a new campaign
     * @param {CampaignCreateRequest} campaignCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApiInterface
     */
    createCampaignRaw(requestParameters: CreateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignResponse>>;

    /**
     * Create a new campaign
     */
    createCampaign(campaignCreateRequest: CampaignCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignResponse>;

    /**
     * 
     * @summary Delete a campaign
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApiInterface
     */
    deleteCampaignRaw(requestParameters: DeleteCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a campaign
     */
    deleteCampaign(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get all campaigns
     * @param {string} [search] Search term for name or coupon code
     * @param {boolean} [active] Filter by active status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApiInterface
     */
    getAllCampaignsRaw(requestParameters: GetAllCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CampaignResponse>>>;

    /**
     * Get all campaigns
     */
    getAllCampaigns(search?: string, active?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CampaignResponse>>;

    /**
     * 
     * @summary Get campaign by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApiInterface
     */
    getCampaignByIdRaw(requestParameters: GetCampaignByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignResponse>>;

    /**
     * Get campaign by ID
     */
    getCampaignById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignResponse>;

    /**
     * 
     * @summary Update a campaign
     * @param {string} id 
     * @param {CampaignUpdateRequest} campaignUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApiInterface
     */
    updateCampaignRaw(requestParameters: UpdateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignResponse>>;

    /**
     * Update a campaign
     */
    updateCampaign(id: string, campaignUpdateRequest: CampaignUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignResponse>;

}

/**
 * 
 */
export class CampaignApi extends runtime.BaseAPI implements CampaignApiInterface {

    /**
     * Create a new campaign
     */
    async createCampaignRaw(requestParameters: CreateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignResponse>> {
        if (requestParameters['campaignCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'campaignCreateRequest',
                'Required parameter "campaignCreateRequest" was null or undefined when calling createCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/campaigns`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['campaignCreateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new campaign
     */
    async createCampaign(campaignCreateRequest: CampaignCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignResponse> {
        const response = await this.createCampaignRaw({ campaignCreateRequest: campaignCreateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a campaign
     */
    async deleteCampaignRaw(requestParameters: DeleteCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/campaigns/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a campaign
     */
    async deleteCampaign(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCampaignRaw({ id: id }, initOverrides);
    }

    /**
     * Get all campaigns
     */
    async getAllCampaignsRaw(requestParameters: GetAllCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CampaignResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/campaigns`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all campaigns
     */
    async getAllCampaigns(search?: string, active?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CampaignResponse>> {
        const response = await this.getAllCampaignsRaw({ search: search, active: active }, initOverrides);
        return await response.value();
    }

    /**
     * Get campaign by ID
     */
    async getCampaignByIdRaw(requestParameters: GetCampaignByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCampaignById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/campaigns/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get campaign by ID
     */
    async getCampaignById(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignResponse> {
        const response = await this.getCampaignByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update a campaign
     */
    async updateCampaignRaw(requestParameters: UpdateCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateCampaign().'
            );
        }

        if (requestParameters['campaignUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'campaignUpdateRequest',
                'Required parameter "campaignUpdateRequest" was null or undefined when calling updateCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/campaigns/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['campaignUpdateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a campaign
     */
    async updateCampaign(id: string, campaignUpdateRequest: CampaignUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignResponse> {
        const response = await this.updateCampaignRaw({ id: id, campaignUpdateRequest: campaignUpdateRequest }, initOverrides);
        return await response.value();
    }

}
