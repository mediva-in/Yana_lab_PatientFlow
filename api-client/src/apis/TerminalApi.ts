/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTerminalSlotRequest,
  ErrorResponse,
  TerminalSlotResponse,
  UpdateTerminalSlotRequest,
} from '../models/index';

export interface ApiTerminalCreateSlotsPostRequest {
    createTerminalSlotRequest: CreateTerminalSlotRequest;
}

export interface ApiTerminalDeleteSlotsIdDeleteRequest {
    id: number;
}

export interface ApiTerminalGetSlotsGetRequest {
    terminalId: number;
    day?: ApiTerminalGetSlotsGetDayEnum;
}

export interface ApiTerminalUpdateSlotsIdPutRequest {
    id: number;
    updateTerminalSlotRequest: UpdateTerminalSlotRequest;
}

/**
 * TerminalApi - interface
 * 
 * @export
 * @interface TerminalApiInterface
 */
export interface TerminalApiInterface {
    /**
     * Creates a new slot for a terminal in the terminal schedule.
     * @summary Create a new terminal slot
     * @param {CreateTerminalSlotRequest} createTerminalSlotRequest The slot information to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApiInterface
     */
    apiTerminalCreateSlotsPostRaw(requestParameters: ApiTerminalCreateSlotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalSlotResponse>>;

    /**
     * Creates a new slot for a terminal in the terminal schedule.
     * Create a new terminal slot
     */
    apiTerminalCreateSlotsPost(createTerminalSlotRequest: CreateTerminalSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalSlotResponse>;

    /**
     * Deletes an existing terminal slot using its ID and returns the deleted slot information.
     * @summary Delete a terminal slot
     * @param {number} id The unique ID of the slot to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApiInterface
     */
    apiTerminalDeleteSlotsIdDeleteRaw(requestParameters: ApiTerminalDeleteSlotsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalSlotResponse>>;

    /**
     * Deletes an existing terminal slot using its ID and returns the deleted slot information.
     * Delete a terminal slot
     */
    apiTerminalDeleteSlotsIdDelete(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalSlotResponse>;

    /**
     * Returns a simple OK message to verify that the terminal API is reachable.
     * @summary Health check route for Terminal API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApiInterface
     */
    apiTerminalGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Returns a simple OK message to verify that the terminal API is reachable.
     * Health check route for Terminal API
     */
    apiTerminalGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Retrieves a list of terminal slots assigned to a specific terminal. Optionally, you can filter the results by the day of the week. 
     * @summary Get terminal slots for a terminal
     * @param {number} terminalId Unique identifier of the terminal whose slots you want to retrieve.
     * @param {'SUNDAY' | 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY'} [day] (Optional) Day of the week to filter the slots.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApiInterface
     */
    apiTerminalGetSlotsGetRaw(requestParameters: ApiTerminalGetSlotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TerminalSlotResponse>>>;

    /**
     * Retrieves a list of terminal slots assigned to a specific terminal. Optionally, you can filter the results by the day of the week. 
     * Get terminal slots for a terminal
     */
    apiTerminalGetSlotsGet(terminalId: number, day?: ApiTerminalGetSlotsGetDayEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TerminalSlotResponse>>;

    /**
     * Updates an existing terminal slot using its ID.
     * @summary Update a terminal slot
     * @param {number} id The unique ID of the slot to update.
     * @param {UpdateTerminalSlotRequest} updateTerminalSlotRequest Updated slot information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApiInterface
     */
    apiTerminalUpdateSlotsIdPutRaw(requestParameters: ApiTerminalUpdateSlotsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalSlotResponse>>;

    /**
     * Updates an existing terminal slot using its ID.
     * Update a terminal slot
     */
    apiTerminalUpdateSlotsIdPut(id: number, updateTerminalSlotRequest: UpdateTerminalSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalSlotResponse>;

}

/**
 * 
 */
export class TerminalApi extends runtime.BaseAPI implements TerminalApiInterface {

    /**
     * Creates a new slot for a terminal in the terminal schedule.
     * Create a new terminal slot
     */
    async apiTerminalCreateSlotsPostRaw(requestParameters: ApiTerminalCreateSlotsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalSlotResponse>> {
        if (requestParameters['createTerminalSlotRequest'] == null) {
            throw new runtime.RequiredError(
                'createTerminalSlotRequest',
                'Required parameter "createTerminalSlotRequest" was null or undefined when calling apiTerminalCreateSlotsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal/create-slots`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createTerminalSlotRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new slot for a terminal in the terminal schedule.
     * Create a new terminal slot
     */
    async apiTerminalCreateSlotsPost(createTerminalSlotRequest: CreateTerminalSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalSlotResponse> {
        const response = await this.apiTerminalCreateSlotsPostRaw({ createTerminalSlotRequest: createTerminalSlotRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an existing terminal slot using its ID and returns the deleted slot information.
     * Delete a terminal slot
     */
    async apiTerminalDeleteSlotsIdDeleteRaw(requestParameters: ApiTerminalDeleteSlotsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalSlotResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTerminalDeleteSlotsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal/delete-slots/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deletes an existing terminal slot using its ID and returns the deleted slot information.
     * Delete a terminal slot
     */
    async apiTerminalDeleteSlotsIdDelete(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalSlotResponse> {
        const response = await this.apiTerminalDeleteSlotsIdDeleteRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Returns a simple OK message to verify that the terminal API is reachable.
     * Health check route for Terminal API
     */
    async apiTerminalGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns a simple OK message to verify that the terminal API is reachable.
     * Health check route for Terminal API
     */
    async apiTerminalGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiTerminalGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of terminal slots assigned to a specific terminal. Optionally, you can filter the results by the day of the week. 
     * Get terminal slots for a terminal
     */
    async apiTerminalGetSlotsGetRaw(requestParameters: ApiTerminalGetSlotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TerminalSlotResponse>>> {
        if (requestParameters['terminalId'] == null) {
            throw new runtime.RequiredError(
                'terminalId',
                'Required parameter "terminalId" was null or undefined when calling apiTerminalGetSlotsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['terminalId'] != null) {
            queryParameters['terminalId'] = requestParameters['terminalId'];
        }

        if (requestParameters['day'] != null) {
            queryParameters['day'] = requestParameters['day'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal/get-slots`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of terminal slots assigned to a specific terminal. Optionally, you can filter the results by the day of the week. 
     * Get terminal slots for a terminal
     */
    async apiTerminalGetSlotsGet(terminalId: number, day?: ApiTerminalGetSlotsGetDayEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TerminalSlotResponse>> {
        const response = await this.apiTerminalGetSlotsGetRaw({ terminalId: terminalId, day: day }, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing terminal slot using its ID.
     * Update a terminal slot
     */
    async apiTerminalUpdateSlotsIdPutRaw(requestParameters: ApiTerminalUpdateSlotsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerminalSlotResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTerminalUpdateSlotsIdPut().'
            );
        }

        if (requestParameters['updateTerminalSlotRequest'] == null) {
            throw new runtime.RequiredError(
                'updateTerminalSlotRequest',
                'Required parameter "updateTerminalSlotRequest" was null or undefined when calling apiTerminalUpdateSlotsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/terminal/update-slots/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateTerminalSlotRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates an existing terminal slot using its ID.
     * Update a terminal slot
     */
    async apiTerminalUpdateSlotsIdPut(id: number, updateTerminalSlotRequest: UpdateTerminalSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerminalSlotResponse> {
        const response = await this.apiTerminalUpdateSlotsIdPutRaw({ id: id, updateTerminalSlotRequest: updateTerminalSlotRequest }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiTerminalGetSlotsGetDayEnum = {
    Sunday: 'SUNDAY',
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY'
} as const;
export type ApiTerminalGetSlotsGetDayEnum = typeof ApiTerminalGetSlotsGetDayEnum[keyof typeof ApiTerminalGetSlotsGetDayEnum];
